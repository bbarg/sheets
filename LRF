Amelia Brunner - arb2196
Gabriel Blanco - gab2135
Ruchir Khaitan - rk2660
Benjamin Barg - bbb2123

                 Sheets - Language Reference Manual

1) TYPES
    1.1) Primitives:
        int
        long
        double
        float
        char

        int[]
        long[]
        double[]
        float[]
        char[]

    1.2) Non-Primitives:
        Strings
        Block
        Struct

    1.3) Casting
        Casting is allowed between:
            -any two numbers
            -floats/doubles to longs/ints lose precision
            -longs/floats to ints/doubless get truncated
            -No casting between primitives and non-primitives

2) LEXICAL CONVENTIONS
    2.1) Identifiers
        Refer to a variable or a function.
        Must begin with alphabetic character or underscore.
        But the rest of the identifier can be alphanumeric or underscores.
        Capital and lowercase letters are treated differently.
        We reject dashes.

    2.2) Keywords
        
        if
        else
        elif
        
        while
        for
        
        break
        continue

        TRUE
        FALSE
        NULL

        return
        const

        func
        gfunc

    2.3) Literals
        int literals
            numbers without a decimal in them
            \d
        float literals 
            numbers with a decimal in them
            (\d+\./d+?)|(\d+?\.\d)
        character literal
            single quote - \'
            double quote - \"
            newline - \n
            horizontal tab \t
        string literal 
            "string literal"
        array literal
            array = [1, 2, 3]

    2.4) Punctuation
            ,           function params
                        array literal separation
            []          array literal declaration
                        array access
            ()          expression precedence
                        conditional parameter
                        function arguments
                        Casting
            :           start of function
            '           character literal declaration
            "           string literal declaration
            
    2.5) Comments
        It's like threads coming out of a sheet!!

        # for inline
        
        #~ for nested ~#
        
        #~
         ~ for long nested
         ~#

    2.6) Operators
            .   Access                  
            *   Multiplication
            /   Division
            %   Mod
            +   Addition
            -   Subtraction
            ^   XOR
            &   AND
            |   OR
            ~   NOT
            >>  Right shift
            <<  Left shift
            =   Assignment
            !   Negation
            ==  Equivalence
            !=  Non-equivalence
            <   Less than
            >   Greater than
            <=  Less than or equal to
            >=  Greater than or equal to
        //todo: discuss differences between variables and matrices?

    2.7) Whitespace
        Blank, tab, and newline characters
        Blank characters will be used for program string delimination
        Blank characters directly following newline characters will 
            be used for functions/blocks-ing.
        Tabs will not be tolerated.

3) SYNTAX
    3.1) Program Structure
        A program consists of a sequence of zero or more valid statements
        Generally speaking:
            We have a main function, which is the program start point
            There can also be other functions (funcs)
            There can also be other GPU functions (gfuncs)
            Order of functions and gfunctions doesn't matter
            No concept of a class

    3.2) Expressions
        An expression is a sequence of operators and operands that may
        have side effects. The order of evaluation is left to right.
        Operands must have the same type.

        3.2.1) Assignment
        3.2.2) Arithmetic
        3.2.3) Comparison operators
        3.2.4) Logical

    3.3) Statements
        3.3.1) Expression statements
            Assignment, for example
        3.3.2) Conditional statements
            if/else/elif
            Using the comparison operators
        3.3.3) Loop statements
            while/for
        3.3.4) Interruption statements
            break/continue
        3.3.5) Return statements
        3.3.6) gfunc statements
            statements invoking gfuncs are blocking
            until they have completed.
            
    3.4) Functions
        There are two kinds of functions- funcs and gfuncs.
        
    3.5) Scope
        3.5.1) GPU related scope
            GPU memory hierarchy
            gfuncs do not have access to CPU memory space;
            this means that all variables that need to be passed
            into the GPU need to be done so through gfunc arguments.
            gfuncs do not have access to global variables.
            The only caveat to this is that global variables can also
            be passed to the GPU through specified library functions,
            such as .blockSize
        3.5.2) CPU related scope
            Global variables are variables that are declared outside
            of a function. These can be accessed by all funcs.
            Sheets will use block scoping, such that any variable defined
            within or within a greater indentation level will be accessible.
4) GFUNCS
    Any call to gfuncs will be blocking.
    Function arguments must be immutable.
    
5) BUILT-IN FUNCTIONS
    5.1) Matrix operations
    5.2) .blockSize
6) PROGRAM EXECUTION
