Amelia Brunner - arb2196
Gabriel Blanco - gab2135
Ruchir Khaitan - rk2660
Benjamin Barg - bbb2123

                 Sheets - Language Reference Manual

1) TYPES
    1.1) Primitives:
        int
        long
        double
        float
        char

        int[]
        long[]
        double[]
        float[]
        char[]

    1.2) Non-Primitives:
        Strings
        Block
        Struct

    1.3) Casting
        Casting is allowed between:
            -any two numbers
            -floats/doubles to longs/ints lose precision
            -longs/floats to ints/doubless get truncated
            -No casting between primitives and non-primitives

2) LEXICAL CONVENTIONS
    2.1) Identifiers
        Refer to a variable or a function.
        Must begin with alphabetic character or underscore.
        But the rest of the identifier can be alphanumeric or underscores.
        Capital and lowercase letters are treated differently.
        We reject dashes.

    2.2) Keywords
        
        if
        else
        elif
        
        while
        for
        in

        break
        continue

        TRUE
        FALSE
        NULL

        return
        const

        func
        gfunc

    2.3) Literals
        int literals
            numbers without a decimal in them
            \d
        float literals 
            numbers with a decimal in them
            (\d+\./d+?)|(\d+?\.\d)
        character literal
            single quote - \'
            double quote - \"
            newline - \n
            horizontal tab \t
        string literal 
            "string literal"
        array literal
            array = [1, 2, 3]

    2.4) Punctuation
            ,           function params
                        array literal separation
            []          array literal declaration
                        array access
            ()          expression precedence
                        conditional parameter
                        function arguments
                        Casting
            :           start of function
            '           character literal declaration
            "           string literal declaration
            
    2.5) Comments
        It's like threads coming out of a sheet!!

        # for inline
        
        #~ for nested ~#
        
        #~
         ~ for long nested
         ~#

    2.6) Operators
            .   Access                  
            
            *   Multiplication              :*  Vector multiplication
            /   Division                    :/  Vector division
            %   Mod                         :%  Vector mod
            +   Addition                    :+  Vector addition
            -   Subtraction                 :-  Vector subtraction
            
            ^   XOR                         :^  Vector XOR
            &   AND                         :&  Vector AND
            |   OR                          :|  Vector OR
            ~   NOT                         :~  Vector NOT
            >>  Right shift                 :>> Vector right shift
            <<  Left shift                  :<< Vector left shift
            
            =   Assignment                  :=  Vector assignment
            !   Negation                    :!  Vector negation
            
            ==  Equivalence                 :== Vector equivalence
            !=  Non-equivalence             :!= Vector non-equivalence
            <   Less than                   :<  Vector less-than
            >   Greater than                :>  Vector greater-than
            <=  Less than or equal to       :<= Vector less-than-or-equal-to
            >=  Greater than or equal to    :>= Vector greater-than-or-equal-to

        Precedence (from greatest to least):
           We will only allow for expressions of only vector operators or only
           non-vector operators. Within the two groups, order of precedence will
           be the same as for C. The comparison operators will be treated the same
           as in C.

    2.7) Whitespace
        Blank, tab, and newline characters
        Blank characters will be used for program string delimination
        Blank characters directly following newline characters will 
            be used for functions/blocks-ing.
        Tabs will not be tolerated.

3) SYNTAX
    3.1) Program Structure
        A program consists of a sequence of zero or more valid statements
        Generally speaking:
            We have a main function, which is the program start point
            There can also be other functions (funcs)
            There can also be other GPU functions (gfuncs)
            Order of functions and gfunctions doesn't matter
            No concept of a class

    3.2) Expressions
        An expression is a sequence of operators and operands that may
        have side effects. The order of evaluation is left to right.
        Operands must have the same type, except in the case of the 
        vector operands (more below).

        3.2.1) Assignment
        3.2.2) Arithmetic
        3.2.3) Comparison operators
        3.2.4) Logical

        3.2.5) Vector operators
        Vector operators, as described above, are operators that we have included for
        convenience in doing vector operations. They can be used as expressions, the same
        way that other operators can be used. However, they actually correspond to a short
        library of gfuncs that we have implemented for the user. All of these vector
        gfuncs require that the operand on the left side of the operator be an array or
        vector, and the operand on the right side of it be either an integer constant to 
        apply to the entire left-hand operand, or another array/vector with the same 
        dimensions, where the operation can be mapped exactly from one index to the other.
        Precedence is applied the same as it is for the non-vector operators.
        We do not tolerate mixed vector operators and normal operators on the same line.

    3.3) Statements
        3.3.1) Expression statements
            Assignment, for example
        3.3.2) Conditional statements
            if/else/elif
            Using the comparison operators
        3.3.3) Loop statements
            while/for
            we allow for special for loops to iterate through arrays, 
            using the syntax 'for <indexing variable> in <array>:'
            

        3.3.4) Interruption statements
            break/continue
        3.3.5) Return statements
        3.3.6) gfunc statements
            statements invoking gfuncs are blocking
            until they have completed.
            
    3.4) Functions
        There are two kinds of functions- funcs and gfuncs.
        
    3.5) Scope
        3.5.1) GPU related scope
            GPU memory hierarchy
            gfuncs do not have access to CPU memory space;
            this means that all variables that need to be passed
            into the GPU need to be done so through gfunc arguments.
            gfuncs do not have access to global variables.
            The only caveat to this is that global variables can also
            be passed to the GPU through specified library functions,
            such as .blockSize
        3.5.2) CPU related scope
            Global variables are variables that are declared outside
            of a function. These can be accessed by all funcs.
            Sheets will use block scoping, such that any variable defined
            within or within a greater indentation level will be accessible.
4) GFUNCS
    Contents of gfuncs will be compiled into the kernel OpenCL files, meaning
    that they will be executed on the GPU. Because of this, we have to enforce
    a few GPU-specific memory and concurrency limitations on the contents of
    gfuncs; they must be parallelizable, meaning that they must 1) must not 
    depend on previous values in array, 2) they must not write to overlapping
    regions in memory, and 3) they should not require excessive shared memory. 
    To enforce these, we have implemented the following: 
        -Any call to gfuncs will be blocking.
        -Function arguments must be immutable.
        -Output length will always be equal to the length of the first argument.
        -Includes special environmental variable, which only exists in the scope
         of the gfunc, that contains all the information that will be passed into
         a block. 
        -block is essentially a struct, which contains:
            -block.size         
                the number of elements that a block can write into
            -block.index                    
                the index of the current block, meaning the index of the segmented
                region of the output array that this block can write to-
                    i.e. if the output array has 100 indices, and there are 20 total blocks 
                    that the output could be split into, there are block indices 0-19, where 
                    each index corresponds to the an increment of 5 in the index of the
                    output array.
            -block.out
                array of size block.size, that represents the writable region in the
                cumulative output for the block

5) BUILT-IN FUNCTIONS
    5.1) length
    5.2) vector library
         (Reverse)
    5.3) File I/O
