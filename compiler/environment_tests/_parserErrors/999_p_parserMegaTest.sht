#~ SHOULDPASS: Parser Mega Test ~#

## Comments
## Nested ## Inline
#~ Single Line Block Comments ~#
#~ 
Multiline Comments 
~#
#~ Multiline ~# #~ Comments ~#
#~ Nested #~ Single Line ~# Comments ~#
#~ Mixed Block and ~# ## Inline Comments

const int a
int b
const float c
float d
const int[] e
int[] f
const float[] g
float[] h

func int main (int x, int y):

    #~ ----------- Declarations ----------- ~#

    const int i
    int j
    const float k
    float l
    const int[] m
    int[] n
    const float[] o
    float[] p

    #~ ----------- All Operations for Ints ----------- ~#

    int l_int
    int r_int
    int result_int

    result_int = l_int + r_int
    result_int = l_int - r_int
    result_int = l_int * r_int
    result_int = l_int / r_int

    result_int = l_int :+ r_int
    result_int = l_int :- r_int
    result_int = l_int :* r_int
    result_int = l_int :/ r_int      

    result_int = l_int / r_int * r_int + r_int - r_int
    result_int = (l_int / r_int) * (r_int + r_int) - r_int
    result_int = ((l_int / r_int * r_int + r_int)) - r_int
    result_int = ((l_int / r_int * r_int + r_int)) - r_int
    result_int = ((((((((((((((r_int))))))))))))))
    result_int = ((((((((((((((r_int)))))))))))))-l_int)

    result_int = l_int :/ r_int :* r_int :+ r_int :- r_int
    result_int = (l_int :/ r_int) :* (r_int :+ r_int) :- r_int
    result_int = ((l_int :/ r_int :* r_int :+ r_int)) :- r_int
    result_int = ((l_int :/ r_int :* r_int :+ r_int)) :- r_int
    result_int = ((((((((((((((r_int))))))))))))))
    result_int = ((((((((((((((r_int))))))))))))):-l_int)  

    result_int = l_int / r_int :* r_int + r_int :- r_int
    result_int = (l_int :/ r_int) * (r_int :+ r_int) - r_int
    result_int = ((l_int / r_int :* r_int + r_int)) :- r_int
    result_int = ((l_int :/ r_int * r_int :+ r_int)) - r_int
    result_int = ((((((((((((((r_int))))))))))))))

    #~ ----------- All Operations for Floats ----------- ~#

    float l_flt
    float r_flt
    float result_flt

    result_flt = l_flt + r_flt
    result_flt = l_flt - r_flt
    result_flt = l_flt * r_flt
    result_flt = l_flt / r_flt

    result_flt = l_flt :+ r_flt
    result_flt = l_flt :- r_flt
    result_flt = l_flt :* r_flt
    result_flt = l_flt :/ r_flt

    result_flt = l_flt / r_flt * r_flt + r_flt - r_flt
    result_flt = (l_flt / r_flt) * (r_flt + r_flt) - r_flt
    result_flt = ((l_flt / r_flt * r_flt + r_flt)) - r_flt
    result_flt = ((l_flt / r_flt * r_flt + r_flt)) - r_flt
    result_flt = ((((((((((((((r_flt))))))))))))))
    result_flt = ((((((((((((((r_flt)))))))))))))-l_flt)  

    result_flt = l_flt :/ r_flt :* r_flt :+ r_flt :- r_flt
    result_flt = (l_flt :/ r_flt) :* (r_flt :+ r_flt) :- r_flt
    result_flt = ((l_flt :/ r_flt :* r_flt :+ r_flt)) :- r_flt
    result_flt = ((l_flt :/ r_flt :* r_flt :+ r_flt)) :- r_flt
    result_flt = ((((((((((((((r_flt))))))))))))))
    result_flt = ((((((((((((((r_flt))))))))))))):-l_flt)

    result_flt = l_flt / r_flt :* r_flt + r_flt :- r_flt
    result_flt = (l_flt :/ r_flt) * (r_flt :+ r_flt) - r_flt
    result_flt = ((l_flt / r_flt :* r_flt + r_flt)) :- r_flt
    result_flt = ((l_flt :/ r_flt * r_flt :+ r_flt)) - r_flt
    result_flt = ((((((((((((((r_flt))))))))))))))

    #~ ----------- Boolean Operations ----------- ~#

    if (l_int > r_int):
        l_int
    if (l_int < r_int):
        l_int
    if (l_int >= r_int):
        l_int
    if (l_int <= r_int):
        l_int
    if (l_int == r_int):
        l_int
    if (l_int != r_int):
        l_int

    #~ ----------- If/Else ----------- ~#

    if (l_int > r_int):
        l_int
    else:
        r_int

    if (l_int < r_int):
        l_int
    else:
        r_int

    if (l_int >= r_int):
        l_int
    else:
        r_int

    if (l_int <= r_int):
        l_int
    else:
        r_int

    if (l_int == r_int):
        l_int
    else:
        r_int

    if (l_int != r_int):
        l_int
    else:
        r_int

    #~ ----------- While ----------- ~#

    while (l_int > r_int):
        l_int
    while (l_int < r_int):
        l_int
    while (l_int >= r_int):
        l_int
    while (l_int <= r_int):
        l_int
    while (l_int == r_int):
        l_int
    while (l_int != r_int):
        l_int

    #~ ----------- For ----------- ~#

    for( a; l_int > r_int; g):
        l_int
    for( b; l_int < r_int; h):
        l_int
    for( c; l_int >= r_int; i):
        l_int
    for( d; l_int <= r_int; j):
        l_int
    for( e; l_int == r_int; k):
        l_int
    for( f; l_int != r_int; l):
        l_int

    for( a; l_int > r_int; g):
        l_int
    for( b; l_int < r_int; h):
        l_int
    for( c; l_int >= r_int; i):
        l_int
    for( d; l_int <= r_int; j):
        l_int
    for( e; l_int == r_int; k):
        l_int
    for( f; l_int != r_int; l):
        l_int        

    #~ ----------- For In ----------- ~#

    int[] int_list[128]
    float[] flt_list[128]

    for elem in int_list:
        l_int
    for elem in flt_list:
        l_int

#~ ----------- Functions ----------- ~#

func int f1 (int a):
    int x 

func int f2 (float a):
    int x 

func int f3 (int[] a):
    int x 

func int f4 (float[] a):
    int x 

func float f5 (int a):
    int x 

func float f6 (float a):
    int x 

func float f7 (int[] a):
    int x 

func float f8 (float[] a):
    int x 

func int[] f9 (int a):
    int x 

func int[] f10 (float a):
    int x 

func int[] f11 (int[] a):
    int x 

func int[] f12 (float[] a):
    int x 

func float[] f13 (int a):
    int x 

func float[] f14 (float a):
    int x 

func float[] f15 (int[] a):
    int x 

func float[] f16 (float[] a):
    int x 

#~ ----------- Gfunctions ----------- ~#

gfunc int[] gf1(int[] a):
    int x 

gfunc float[] gf2(float[] a):
    int x

gfunc int[] gf3(float[] a):
    int x

gfunc float[] gf4(int[] a):
    int x

gfunc int[] gf5(int[] a).[1]:
    int x 

gfunc float[] gf6(float[] a).[2]:
    int x

gfunc int[] gf7(float[] a).[3]:
    int x

gfunc float[] gf8(int[] a).[4]:
    int x     

