How do we accound for correct typing in gfunc declarations?

===
Saturday, Nov 8th

bbarg --- We've realized several major issues in our attempts to write
a parser/syntactical analayzer/translator. Here's a lists of things we
need to do:

- Which types do we need in our abstract syntax tree?
- How do we translate the output of our parser into OpenCL?
- When do we enforce type-checking/restrictions on gfuncs?
  + Example: only having g_expressions or scalar expressions in an
    individual statement?
  + How do we deal with including scalar literal/variables in the
    scalar operators?
- How do we deal with the different type declarations (int, float,
  long, double) that are not dealt with in the micro-c compiler?
  + We PROBABLY need to have a "variable" type that keep track of its
    own type...
- Should we be parsing literals into Ocaml types in the scanner?
- Look through interpreter code (MicroC) to see how AST is used in the
  next step?
- How do we handle type-casting?
